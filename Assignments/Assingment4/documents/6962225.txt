Title: Iota and Jot

In formal language theory and computer science, Iota and Jot (from Greek iota ι, Hebrew yodh י, the smallest letters in those two alphabets) are languages, extremely minimalist formal systems, designed to be even simpler than other more popular alternatives, such as the lambda calculus and SKI combinator calculus. Thus, they can also be considered minimalist computer programming languages, or Turing tarpits, esoteric programming languages designed to be as small as possible but still Turing-complete. Both systems use only two symbols and involve only two operations. Both were created by professor of linguistics Chris Barker in 2001. Zot (2002) is a successor to Iota that supports input and output.

Note that this article uses Backus-Naur form to describe syntax.

==Universal iota==
Chris Barker's universal iota combinator  has the very simple λf.fSK structure defined here, using denotational semantics in terms of the lambda calculus,



From this, one can recover the usual SKI expressions, thus:



Because of its minimalism, it has influenced research concerning Chaitin's constant.

==Iota==
Iota is the LL(1) language that prefix orders trees of the aforementioned Universal iota  combinator leafs, consed by function application ,

iota = "1" | "0" iota iota

so that for example  denotes ((\iota\iota)(\iota\iota)), whereas  denotes (\iota(\iota(\iota\iota))).

==Jot==
Jot is the regular language consisting of all sequences of 0 and 1,

jot = "" | jot "0" | jot "1"

The semantics is given by translation to SKI expressions.
The empty string denotes I,
w0 denotes (([w]S)K),
where [w] is the translation of w,
and w1 denotes (S(K[w])).

The point of the w1 case is that the translation satisfies (([w1]A)B) = ([w](A B)) for arbitrary SKI terms A and B.
For example,
[w11100] = (([w1110]S)K) = (((([w111]S)K)S)K) = ((([w11](SK))S)K) = (([w1]((SK)S))K) = ([w](((SK)S)K)) = ([w]K)
holds for arbitrary strings w.
Similarly,
[w11111000] = (((((([w11111]S)K)S)K)S)K) = ([w](((((SK)S)K)S)K)) = ([w]S)
holds as well.
These two examples are the base cases of the translation of arbitrary SKI terms to Jot given by Barker,
making Jot a natural Gödel numbering of all algorithms.

Jot is connected to Iota by the fact that [w0] = (\iota[w]) and by using the same identities on SKI terms for obtaining the basic combinators K and S.

==Zot==
The Zot and Positive Zot languages command Iota computations, from inputs to outputs by continuation-passing style, in syntax resembling  Jot,


zot = pot | ""
pot = iot | pot iot
iot = "0" | "1"

where  produces the continuation \lambda cL.L(\lambda lR.R(\lambda r.c(lr))),
and  produces the continuation \lambda c.c\iota,
and  consumes the final input digit  by continuing through the continuation .

==See also==
*Lambda calculus
*Combinatory logic
*Binary combinatory logic
*SKI combinator calculus

